// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonHunDex.Data;

#nullable disable

namespace MonHunDex.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221227143753_CreateRelationshipBetweenMonsterAndMoveTables")]
    partial class CreateRelationshipBetweenMonsterAndMoveTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MonHunDex.Models.Ailment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ailments");
                });

            modelBuilder.Entity("MonHunDex.Models.Behavior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Behaviors");
                });

            modelBuilder.Entity("MonHunDex.Models.Element", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("MonHunDex.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Geography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MonHunDex.Models.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("MonHunDex.Models.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BehaviorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonsterClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Physiology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BehaviorId");

                    b.HasIndex("MonsterClassId");

                    b.ToTable("SuperHeroes");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterAilment", b =>
                {
                    b.Property<int>("AilmentId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.HasKey("AilmentId", "MonsterId");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonsterAilments");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MonsterClasses");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterElement", b =>
                {
                    b.Property<int>("ElementId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.HasKey("ElementId", "MonsterId");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonsterElements");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.HasKey("LocationId", "MonsterId");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonsterLocations");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterMove", b =>
                {
                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("MoveId", "MonsterId");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonsterMoves");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MonsterID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MonsterID");

                    b.ToTable("MonsterTitles");
                });

            modelBuilder.Entity("MonHunDex.Models.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("MonHunDex.Models.Location", b =>
                {
                    b.HasOne("MonHunDex.Models.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("MonHunDex.Models.Monster", b =>
                {
                    b.HasOne("MonHunDex.Models.Behavior", "Behavior")
                        .WithMany()
                        .HasForeignKey("BehaviorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonHunDex.Models.MonsterClass", "MonsterClass")
                        .WithMany()
                        .HasForeignKey("MonsterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Behavior");

                    b.Navigation("MonsterClass");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterAilment", b =>
                {
                    b.HasOne("MonHunDex.Models.Ailment", "Ailment")
                        .WithMany("MonsterAilments")
                        .HasForeignKey("AilmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonHunDex.Models.Monster", "Monster")
                        .WithMany("MonsterAilments")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ailment");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterElement", b =>
                {
                    b.HasOne("MonHunDex.Models.Element", "Element")
                        .WithMany("MonsterElements")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonHunDex.Models.Monster", "Monster")
                        .WithMany("MonsterElements")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterLocation", b =>
                {
                    b.HasOne("MonHunDex.Models.Location", "Location")
                        .WithMany("MonsterLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonHunDex.Models.Monster", "Monster")
                        .WithMany("MonsterLocations")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterMove", b =>
                {
                    b.HasOne("MonHunDex.Models.Monster", "Monster")
                        .WithMany("MonsterMoves")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MonHunDex.Models.Move", "Move")
                        .WithMany("MonsterMoves")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monster");

                    b.Navigation("Move");
                });

            modelBuilder.Entity("MonHunDex.Models.MonsterTitle", b =>
                {
                    b.HasOne("MonHunDex.Models.Monster", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("MonHunDex.Models.Ailment", b =>
                {
                    b.Navigation("MonsterAilments");
                });

            modelBuilder.Entity("MonHunDex.Models.Element", b =>
                {
                    b.Navigation("MonsterElements");
                });

            modelBuilder.Entity("MonHunDex.Models.Location", b =>
                {
                    b.Navigation("MonsterLocations");
                });

            modelBuilder.Entity("MonHunDex.Models.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("MonHunDex.Models.Monster", b =>
                {
                    b.Navigation("MonsterAilments");

                    b.Navigation("MonsterElements");

                    b.Navigation("MonsterLocations");

                    b.Navigation("MonsterMoves");
                });

            modelBuilder.Entity("MonHunDex.Models.Move", b =>
                {
                    b.Navigation("MonsterMoves");
                });
#pragma warning restore 612, 618
        }
    }
}
